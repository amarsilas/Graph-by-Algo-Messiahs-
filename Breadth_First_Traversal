 import java.io.*;
 import java.util.*;
 
class Graph 
{ 
    
private int Vertices;  

private LinkedList<Integer> adj_list[];    


Graph(int v) 
{
    Vertices = v; 
adj_list = new LinkedList[v]; 
for (int i=0; i<v; ++i)      
adj_list[i] = new LinkedList(); 
} 

 void addEdge(int v,int w) 
 { 
    adj_list[v].add(w);
 }
 // BFS traversal from the root_node
 
 void BFS(int root_node) {
 
     boolean visited[] = new boolean[Vertices];
 
 LinkedList<Integer> queue = new LinkedList<Integer>(); 
// current node = visited, insert into queue 

     visited[root_node]=true; 
     queue.add(root_node);
     while (queue.size() != 0) {
     root_node = queue.poll(); 
      System.out.print(root_node+" ");

       Iterator<Integer> i = adj_list[root_node].listIterator();
        while (i.hasNext())
       {
      int n = i.next(); 
       if (!visited[n]) {
      visited[n] = true;
       queue.add(n);
               }  
        }   
     }
   } 

    void DFS(int i) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
 }
 class Main
 { 

       public static void main(String args[]) { 
     
           Graph g = new Graph(5); 


           g.addEdge(0, 1); 
           g.addEdge(0, 2); 
           g.addEdge(0, 3);
           g.addEdge(1, 2);
           g.addEdge(2, 4);
 
 System.out.println("Breadth-first traversal of graph with 0 as starting vertex:");
  
 g.BFS(0); 
} 
}
